/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Patient from '../model/Patient';

/**
* Patient service.
* @module api/PatientApi
* @version 1.0.0
*/
export default class PatientApi {

    /**
    * Constructs a new PatientApi. 
    * @alias module:api/PatientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createpatient operation.
     * @callback module:api/PatientApi~createpatientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Patient} patient data to be created
     * @param {module:api/PatientApi~createpatientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    createpatient(patient, callback) {
      let postBody = patient;
      // verify the required parameter 'patient' is set
      if (patient === undefined || patient === null) {
        throw new Error("Missing the required parameter 'patient' when calling createpatient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/patient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletepatient operation.
     * @callback module:api/PatientApi~deletepatientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} patientId the Id parameter
     * @param {module:api/PatientApi~deletepatientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletepatient(patientId, callback) {
      let postBody = null;
      // verify the required parameter 'patientId' is set
      if (patientId === undefined || patientId === null) {
        throw new Error("Missing the required parameter 'patientId' when calling deletepatient");
      }

      let pathParams = {
        'patientId': patientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/patient/{patientId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllpatient operation.
     * @callback module:api/PatientApi~getAllpatientCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Patient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/PatientApi~getAllpatientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Patient>}
     */
    getAllpatient(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Patient];
      return this.apiClient.callApi(
        '/patient/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpatient operation.
     * @callback module:api/PatientApi~getpatientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} patientId the Id parameter
     * @param {module:api/PatientApi~getpatientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    getpatient(patientId, callback) {
      let postBody = null;
      // verify the required parameter 'patientId' is set
      if (patientId === undefined || patientId === null) {
        throw new Error("Missing the required parameter 'patientId' when calling getpatient");
      }

      let pathParams = {
        'patientId': patientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/patient/{patientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepatient operation.
     * @callback module:api/PatientApi~updatepatientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} patientId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Patient} opts.patient data to be updated
     * @param {module:api/PatientApi~updatepatientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    updatepatient(patientId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patient'];
      // verify the required parameter 'patientId' is set
      if (patientId === undefined || patientId === null) {
        throw new Error("Missing the required parameter 'patientId' when calling updatepatient");
      }

      let pathParams = {
        'patientId': patientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/patient/{patientId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
